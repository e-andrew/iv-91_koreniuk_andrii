from numpy.linalg import det


class SquareCentralOrthogonalModel:
    K = 0
    N = 0
    A = list()
    B = list()

    def __init__(self, K, N):
        self.K = K
        self.N = N

    def __del__(self):
        del self.K, self.N, self.A, self.B

    def find_nature_cfs(self, m, nx, y):
        """nx - матриця натуральних значень х"""
        nx.append([nx[1][i] * nx[2][i] for i in range(self.N)])
        nx.append([nx[1][i] * nx[3][i] for i in range(self.N)])
        nx.append([nx[2][i] * nx[3][i] for i in range(self.N)])
        nx.append([nx[1][i] * nx[2][i] * nx[3][i] for i in range(self.N)])
        nx.append([nx[1][i] ** 2 for i in range(self.N)])
        nx.append([nx[2][i] ** 2 for i in range(self.N)])
        nx.append([nx[3][i] ** 2 for i in range(self.N)])
        self.A = self.find_cfs_core(m, nx, y)


    def find_encoded_cfs(self, m, x, y):
        """x - матриця натуральных значень факторів"""
        x.append([x[1][i] * x[2][i] for i in range(self.N)])
        x.append([x[1][i] * x[3][i] for i in range(self.N)])
        x.append([x[2][i] * x[3][i] for i in range(self.N)])
        x.append([x[1][i] * x[2][i] * x[3][i] for i in range(self.N)])
        x.append([x[1][i] ** 2 for i in range(self.N)])
        x.append([x[2][i] ** 2 for i in range(self.N)])
        x.append([x[3][i] ** 2 for i in range(self.N)])
        self.B = self.find_cfs_core(m, x, y)

    def find_cfs_core(self, m, x, y):
        m00, m10, m20, m30, m40, m50, m60, m70, m80, m90, m100, k0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        m01, m11, m21, m31, m41, m51, m61, m71, m81, m91, m101, k1 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        m02, m12, m22, m32, m42, m52, m62, m72, m82, m92, m102, k2 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        m03, m13, m23, m33, m43, m53, m63, m73, m83, m93, m103, k3 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        m04, m14, m24, m34, m44, m54, m64, m74, m84, m94, m104, k4 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        m05, m15, m25, m35, m45, m55, m65, m75, m85, m95, m105, k5 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        m06, m16, m26, m36, m46, m56, m66, m76, m86, m96, m106, k6 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        m07, m17, m27, m37, m47, m57, m67, m77, m87, m97, m107, k7 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        m08, m18, m28, m38, m48, m58, m68, m78, m88, m98, m108, k8 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        m09, m19, m29, m39, m49, m59, m69, m79, m89, m99, m109, k9 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        m010, m110, m210, m310, m410, m510, m610, m710, m810, m910, m1010, k10 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        for i in range(self.N):
            for j in range(m):
                m00 += x[0][i]
                m10 += x[1][i]
                m20 += x[2][i]
                m30 += x[3][i]
                m40 += x[4][i]
                m50 += x[5][i]
                m60 += x[6][i]
                m70 += x[7][i]
                m80 += x[8][i]
                m90 += x[9][i]
                m100 += x[10][i]
                k0 += y[i][j]
                m01 += x[0][i] * x[1][i]
                m11 += x[1][i] * x[1][i]
                m21 += x[2][i] * x[1][i]
                m31 += x[3][i] * x[1][i]
                m41 += x[4][i] * x[1][i]
                m51 += x[5][i] * x[1][i]
                m61 += x[6][i] * x[1][i]
                m71 += x[7][i] * x[1][i]
                m81 += x[8][i] * x[1][i]
                m91 += x[9][i] * x[1][i]
                m101 += x[10][i] * x[1][i]
                k1 += y[i][j] * x[1][i]
                m02 += x[0][i] * x[2][i]
                m12 += x[1][i] * x[2][i]
                m22 += x[2][i] * x[2][i]
                m32 += x[3][i] * x[2][i]
                m42 += x[4][i] * x[2][i]
                m52 += x[5][i] * x[2][i]
                m62 += x[6][i] * x[2][i]
                m72 += x[7][i] * x[2][i]
                m82 += x[8][i] * x[2][i]
                m92 += x[9][i] * x[2][i]
                m102 += x[10][i] * x[2][i]
                k2 += y[i][j] * x[2][i]
                m03 += x[0][i] * x[3][i]
                m13 += x[1][i] * x[3][i]
                m23 += x[2][i] * x[3][i]
                m33 += x[3][i] * x[3][i]
                m43 += x[4][i] * x[3][i]
                m53 += x[5][i] * x[3][i]
                m63 += x[6][i] * x[3][i]
                m73 += x[7][i] * x[3][i]
                m83 += x[8][i] * x[3][i]
                m93 += x[9][i] * x[3][i]
                m103 += x[10][i] * x[3][i]
                k3 += y[i][j] * x[3][i]
                m04 += x[0][i] * x[4][i]
                m14 += x[1][i] * x[4][i]
                m24 += x[2][i] * x[4][i]
                m34 += x[3][i] * x[4][i]
                m44 += x[4][i] * x[4][i]
                m54 += x[5][i] * x[4][i]
                m64 += x[6][i] * x[4][i]
                m74 += x[7][i] * x[4][i]
                m84 += x[8][i] * x[4][i]
                m94 += x[9][i] * x[4][i]
                m104 += x[10][i] * x[4][i]
                k4 += y[i][j] * x[4][i]
                m05 += x[0][i] * x[5][i]
                m15 += x[1][i] * x[5][i]
                m25 += x[2][i] * x[5][i]
                m35 += x[3][i] * x[5][i]
                m45 += x[4][i] * x[5][i]
                m55 += x[5][i] * x[5][i]
                m65 += x[6][i] * x[5][i]
                m75 += x[7][i] * x[5][i]
                m85 += x[8][i] * x[5][i]
                m95 += x[9][i] * x[5][i]
                m105 += x[10][i] * x[5][i]
                k5 += y[i][j] * x[5][i]
                m06 += x[0][i] * x[6][i]
                m16 += x[1][i] * x[6][i]
                m26 += x[2][i] * x[6][i]
                m36 += x[3][i] * x[6][i]
                m46 += x[4][i] * x[6][i]
                m56 += x[5][i] * x[6][i]
                m66 += x[6][i] * x[6][i]
                m76 += x[7][i] * x[6][i]
                m86 += x[8][i] * x[6][i]
                m96 += x[9][i] * x[6][i]
                m106 += x[10][i] * x[6][i]
                k6 += y[i][j] * x[6][i]
                m07 += x[0][i] * x[7][i]
                m17 += x[1][i] * x[7][i]
                m27 += x[2][i] * x[7][i]
                m37 += x[3][i] * x[7][i]
                m47 += x[4][i] * x[7][i]
                m57 += x[5][i] * x[7][i]
                m67 += x[6][i] * x[7][i]
                m77 += x[7][i] * x[7][i]
                m87 += x[8][i] * x[7][i]
                m97 += x[9][i] * x[7][i]
                m107 += x[10][i] * x[7][i]
                k7 += y[i][j] * x[7][i]
                m08 += x[0][i] * x[8][i]
                m18 += x[1][i] * x[8][i]
                m28 += x[2][i] * x[8][i]
                m38 += x[3][i] * x[8][i]
                m48 += x[4][i] * x[8][i]
                m58 += x[5][i] * x[8][i]
                m68 += x[6][i] * x[8][i]
                m78 += x[7][i] * x[8][i]
                m88 += x[8][i] * x[8][i]
                m98 += x[9][i] * x[8][i]
                m108 += x[10][i] * x[8][i]
                k8 += y[i][j] * x[8][i]
                m09 += x[0][i] * x[9][i]
                m19 += x[1][i] * x[9][i]
                m29 += x[2][i] * x[9][i]
                m39 += x[3][i] * x[9][i]
                m49 += x[4][i] * x[9][i]
                m59 += x[5][i] * x[9][i]
                m69 += x[6][i] * x[9][i]
                m79 += x[7][i] * x[9][i]
                m89 += x[8][i] * x[9][i]
                m99 += x[9][i] * x[9][i]
                m109 += x[10][i] * x[9][i]
                k9 += y[i][j] * x[9][i]
                m010 += x[0][i] * x[10][i]
                m110 += x[1][i] * x[10][i]
                m210 += x[2][i] * x[10][i]
                m310 += x[3][i] * x[10][i]
                m410 += x[4][i] * x[10][i]
                m510 += x[5][i] * x[10][i]
                m610 += x[6][i] * x[10][i]
                m710 += x[7][i] * x[10][i]
                m810 += x[8][i] * x[10][i]
                m910 += x[9][i] * x[10][i]
                m1010 += x[10][i] * x[10][i]
                k10 += y[i][j] * x[10][i]

        main_det = det([
            [m00, m10, m20, m30, m40, m50, m60, m70, m80, m90, m100],
            [m01, m11, m21, m31, m41, m51, m61, m71, m81, m91, m101],
            [m02, m12, m22, m32, m42, m52, m62, m72, m82, m92, m102],
            [m03, m13, m23, m33, m43, m53, m63, m73, m83, m93, m103],
            [m04, m14, m24, m34, m44, m54, m64, m74, m84, m94, m104],
            [m05, m15, m25, m35, m45, m55, m65, m75, m85, m95, m105],
            [m06, m16, m26, m36, m46, m56, m66, m76, m86, m96, m106],
            [m07, m17, m27, m37, m47, m57, m67, m77, m87, m97, m107],
            [m08, m18, m28, m38, m48, m58, m68, m78, m88, m98, m108],
            [m09, m19, m29, m39, m49, m59, m69, m79, m89, m99, m109],
            [m010, m110, m210, m310, m410, m510, m610, m710, m810, m910, m1010]
        ])

        det0 = det([
            [k0, m10, m20, m30, m40, m50, m60, m70, m80, m90, m100],
            [k1, m11, m21, m31, m41, m51, m61, m71, m81, m91, m101],
            [k2, m12, m22, m32, m42, m52, m62, m72, m82, m92, m102],
            [k3, m13, m23, m33, m43, m53, m63, m73, m83, m93, m103],
            [k4, m14, m24, m34, m44, m54, m64, m74, m84, m94, m104],
            [k5, m15, m25, m35, m45, m55, m65, m75, m85, m95, m105],
            [k6, m16, m26, m36, m46, m56, m66, m76, m86, m96, m106],
            [k7, m17, m27, m37, m47, m57, m67, m77, m87, m97, m107],
            [k8, m18, m28, m38, m48, m58, m68, m78, m88, m98, m108],
            [k9, m19, m29, m39, m49, m59, m69, m79, m89, m99, m109],
            [k10, m110, m210, m310, m410, m510, m610, m710, m810, m910, m1010]
        ])

        det1 = det([
            [m00, k0, m20, m30, m40, m50, m60, m70, m80, m90, m100],
            [m01, k1, m21, m31, m41, m51, m61, m71, m81, m91, m101],
            [m02, k2, m22, m32, m42, m52, m62, m72, m82, m92, m102],
            [m03, k3, m23, m33, m43, m53, m63, m73, m83, m93, m103],
            [m04, k4, m24, m34, m44, m54, m64, m74, m84, m94, m104],
            [m05, k5, m25, m35, m45, m55, m65, m75, m85, m95, m105],
            [m06, k6, m26, m36, m46, m56, m66, m76, m86, m96, m106],
            [m07, k7, m27, m37, m47, m57, m67, m77, m87, m97, m107],
            [m08, k8, m28, m38, m48, m58, m68, m78, m88, m98, m108],
            [m09, k9, m29, m39, m49, m59, m69, m79, m89, m99, m109],
            [m010, k10, m210, m310, m410, m510, m610, m710, m810, m910, m1010]
        ])

        det2 = det([
            [m00, m10, k0, m30, m40, m50, m60, m70, m80, m90, m100],
            [m01, m11, k1, m31, m41, m51, m61, m71, m81, m91, m101],
            [m02, m12, k2, m32, m42, m52, m62, m72, m82, m92, m102],
            [m03, m13, k3, m33, m43, m53, m63, m73, m83, m93, m103],
            [m04, m14, k4, m34, m44, m54, m64, m74, m84, m94, m104],
            [m05, m15, k5, m35, m45, m55, m65, m75, m85, m95, m105],
            [m06, m16, k6, m36, m46, m56, m66, m76, m86, m96, m106],
            [m07, m17, k7, m37, m47, m57, m67, m77, m87, m97, m107],
            [m08, m18, k8, m38, m48, m58, m68, m78, m88, m98, m108],
            [m09, m19, k9, m39, m49, m59, m69, m79, m89, m99, m109],
            [m010, m110, k10, m310, m410, m510, m610, m710, m810, m910, m1010]
        ])

        det3 = det([
            [m00, m10, m20, k0, m40, m50, m60, m70, m80, m90, m100],
            [m01, m11, m21, k1, m41, m51, m61, m71, m81, m91, m101],
            [m02, m12, m22, k2, m42, m52, m62, m72, m82, m92, m102],
            [m03, m13, m23, k3, m43, m53, m63, m73, m83, m93, m103],
            [m04, m14, m24, k4, m44, m54, m64, m74, m84, m94, m104],
            [m05, m15, m25, k5, m45, m55, m65, m75, m85, m95, m105],
            [m06, m16, m26, k6, m46, m56, m66, m76, m86, m96, m106],
            [m07, m17, m27, k7, m47, m57, m67, m77, m87, m97, m107],
            [m08, m18, m28, k8, m48, m58, m68, m78, m88, m98, m108],
            [m09, m19, m29, k9, m49, m59, m69, m79, m89, m99, m109],
            [m010, m110, m210, k10, m410, m510, m610, m710, m810, m910, m1010]
        ])

        det4 = det([
            [m00, m10, m20, m30, k0, m50, m60, m70, m80, m90, m100],
            [m01, m11, m21, m31, k1, m51, m61, m71, m81, m91, m101],
            [m02, m12, m22, m32, k2, m52, m62, m72, m82, m92, m102],
            [m03, m13, m23, m33, k3, m53, m63, m73, m83, m93, m103],
            [m04, m14, m24, m34, k4, m54, m64, m74, m84, m94, m104],
            [m05, m15, m25, m35, k5, m55, m65, m75, m85, m95, m105],
            [m06, m16, m26, m36, k6, m56, m66, m76, m86, m96, m106],
            [m07, m17, m27, m37, k7, m57, m67, m77, m87, m97, m107],
            [m08, m18, m28, m38, k8, m58, m68, m78, m88, m98, m108],
            [m09, m19, m29, m39, k9, m59, m69, m79, m89, m99, m109],
            [m010, m110, m210, m310, k10, m510, m610, m710, m810, m910, m1010]
        ])

        det5 = det([
            [m00, m10, m20, m30, m40, k0, m60, m70, m80, m90, m100],
            [m01, m11, m21, m31, m41, k1, m61, m71, m81, m91, m101],
            [m02, m12, m22, m32, m42, k2, m62, m72, m82, m92, m102],
            [m03, m13, m23, m33, m43, k3, m63, m73, m83, m93, m103],
            [m04, m14, m24, m34, m44, k4, m64, m74, m84, m94, m104],
            [m05, m15, m25, m35, m45, k5, m65, m75, m85, m95, m105],
            [m06, m16, m26, m36, m46, k6, m66, m76, m86, m96, m106],
            [m07, m17, m27, m37, m47, k7, m67, m77, m87, m97, m107],
            [m08, m18, m28, m38, m48, k8, m68, m78, m88, m98, m108],
            [m09, m19, m29, m39, m49, k9, m69, m79, m89, m99, m109],
            [m010, m110, m210, m310, m410, k10, m610, m710, m810, m910, m1010]
        ])

        det6 = det([
            [m00, m10, m20, m30, m40, m50, k0, m70, m80, m90, m100],
            [m01, m11, m21, m31, m41, m51, k1, m71, m81, m91, m101],
            [m02, m12, m22, m32, m42, m52, k2, m72, m82, m92, m102],
            [m03, m13, m23, m33, m43, m53, k3, m73, m83, m93, m103],
            [m04, m14, m24, m34, m44, m54, k4, m74, m84, m94, m104],
            [m05, m15, m25, m35, m45, m55, k5, m75, m85, m95, m105],
            [m06, m16, m26, m36, m46, m56, k6, m76, m86, m96, m106],
            [m07, m17, m27, m37, m47, m57, k7, m77, m87, m97, m107],
            [m08, m18, m28, m38, m48, m58, k8, m78, m88, m98, m108],
            [m09, m19, m29, m39, m49, m59, k9, m79, m89, m99, m109],
            [m010, m110, m210, m310, m410, m510, k10, m710, m810, m910, m1010]
        ])

        det7 = det([
            [m00, m10, m20, m30, m40, m50, m60, k0, m80, m90, m100],
            [m01, m11, m21, m31, m41, m51, m61, k1, m81, m91, m101],
            [m02, m12, m22, m32, m42, m52, m62, k2, m82, m92, m102],
            [m03, m13, m23, m33, m43, m53, m63, k3, m83, m93, m103],
            [m04, m14, m24, m34, m44, m54, m64, k4, m84, m94, m104],
            [m05, m15, m25, m35, m45, m55, m65, k5, m85, m95, m105],
            [m06, m16, m26, m36, m46, m56, m66, k6, m86, m96, m106],
            [m07, m17, m27, m37, m47, m57, m67, k7, m87, m97, m107],
            [m08, m18, m28, m38, m48, m58, m68, k8, m88, m98, m108],
            [m09, m19, m29, m39, m49, m59, m69, k9, m89, m99, m109],
            [m010, m110, m210, m310, m410, m510, m610, k10, m810, m910, m1010]
        ])

        det8 = det([
            [m00, m10, m20, m30, m40, m50, m60, m70, k0, m90, m100],
            [m01, m11, m21, m31, m41, m51, m61, m71, k1, m91, m101],
            [m02, m12, m22, m32, m42, m52, m62, m72, k2, m92, m102],
            [m03, m13, m23, m33, m43, m53, m63, m73, k3, m93, m103],
            [m04, m14, m24, m34, m44, m54, m64, m74, k4, m94, m104],
            [m05, m15, m25, m35, m45, m55, m65, m75, k5, m95, m105],
            [m06, m16, m26, m36, m46, m56, m66, m76, k6, m96, m106],
            [m07, m17, m27, m37, m47, m57, m67, m77, k7, m97, m107],
            [m08, m18, m28, m38, m48, m58, m68, m78, k8, m98, m108],
            [m09, m19, m29, m39, m49, m59, m69, m79, k9, m99, m109],
            [m010, m110, m210, m310, m410, m510, m610, m710, k10, m910, m1010]
        ])

        det9 = det([
            [m00, m10, m20, m30, m40, m50, m60, m70, m80, k0, m100],
            [m01, m11, m21, m31, m41, m51, m61, m71, m81, k1, m101],
            [m02, m12, m22, m32, m42, m52, m62, m72, m82, k2, m102],
            [m03, m13, m23, m33, m43, m53, m63, m73, m83, k3, m103],
            [m04, m14, m24, m34, m44, m54, m64, m74, m84, k4, m104],
            [m05, m15, m25, m35, m45, m55, m65, m75, m85, k5, m105],
            [m06, m16, m26, m36, m46, m56, m66, m76, m86, k6, m106],
            [m07, m17, m27, m37, m47, m57, m67, m77, m87, k7, m107],
            [m08, m18, m28, m38, m48, m58, m68, m78, m88, k8, m108],
            [m09, m19, m29, m39, m49, m59, m69, m79, m89, k9, m109],
            [m010, m110, m210, m310, m410, m510, m610, m710, m810, k10, m1010]
        ])

        det10 = det([
            [m00, m10, m20, m30, m40, m50, m60, m70, m80, m90, k0],
            [m01, m11, m21, m31, m41, m51, m61, m71, m81, m91, k1],
            [m02, m12, m22, m32, m42, m52, m62, m72, m82, m92, k2],
            [m03, m13, m23, m33, m43, m53, m63, m73, m83, m93, k3],
            [m04, m14, m24, m34, m44, m54, m64, m74, m84, m94, k4],
            [m05, m15, m25, m35, m45, m55, m65, m75, m85, m95, k5],
            [m06, m16, m26, m36, m46, m56, m66, m76, m86, m96, k6],
            [m07, m17, m27, m37, m47, m57, m67, m77, m87, m97, k7],
            [m08, m18, m28, m38, m48, m58, m68, m78, m88, m98, k8],
            [m09, m19, m29, m39, m49, m59, m69, m79, m89, m99, k9],
            [m010, m110, m210, m310, m410, m510, m610, m710, m810, m910, k10]
        ])

        cfs0 = det0 / main_det
        cfs1 = det1 / main_det
        cfs2 = det2 / main_det
        cfs3 = det3 / main_det
        cfs4 = det4 / main_det
        cfs5 = det5 / main_det
        cfs6 = det6 / main_det
        cfs7 = det7 / main_det
        cfs8 = det8 / main_det
        cfs9 = det9 / main_det
        cfs10 = det10 / main_det

        return [cfs0, cfs1, cfs2, cfs3, cfs4, cfs5, cfs6, cfs7, cfs8, cfs9, cfs10]


    def calculate_with_nature_cfs(self, nxl):
        """nxl - nature x line"""
        return self.A[0]*nxl[0] + self.A[1]*nxl[1] + self.A[2]*nxl[2] + self.A[3]*nxl[3] + \
               self.A[4]*nxl[1]*nxl[2] + self.A[5]*nxl[1]*nxl[3] + self.A[6]*nxl[2]*nxl[3] + \
               self.A[7]*nxl[1]*nxl[2]*nxl[3] + self.A[8]*(nxl[1] ** 2) + self.A[9]*(nxl[2] ** 2) +\
               self.A[10]*(nxl[3] ** 2)

    def calculate_with_encoded_cfs(self, xl):
        """xl - encoded x line"""
        return self.B[0]*xl[0] + self.B[1]*xl[1] + self.B[2]*xl[2] + self.B[3]*xl[3] + \
               self.B[4]*xl[1]*xl[2] + self.B[5]*xl[1]*xl[3] + self.B[6]*xl[2]*xl[3] + \
               self.B[7]*xl[1]*xl[2]*xl[3] + self.B[8]*(xl[1] ** 2) + self.B[9]*(xl[2] ** 2) +\
               self.B[10]*(xl[3] ** 2)
