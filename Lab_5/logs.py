from beautifultable import BeautifulTable

SYSTEM_MARK_L = "Action: "
SYSTEM_MARK_V = "View: "

text = {
    0: "Розглянемо лінійне рівняння регресії без взаємодії факторів:\ny = b0 + b1·x1 + b2·x2 + b3·x3",
    1: "Розглянемо лінійне рівняння регресії із врахуванням взаємодії факторів:\n"
       "y = b0 + b1·x1 + b2·x2 + b3·x3 + b12·x1·x2 + b13·x1·x3 + b23·x2·x3 + b123·x1·x2·x3",
    2: "Розглянемо рівняння регресії із врахуванням квадратичних членів:\n"
       "y = b0 + b1·x1 + b2·x2 + b3·x3 + b12·x1·x2 + b13·x1·x3 + b23·x2·x3 + b123·x1·x2·x3 + " +
       "b11·x1·x1 + b22·x2·x2 + b33·x3·x3",
    3: "Маємо, N = {0}, K = {1}, m = {2}.",
    4: "Складаємо матрицю планування і проведимо експерименти",
    5: "Розраховуємо натуральні значення коефіцієнтів.",
    6: "Розраховуємо кодовані значення коефіцієнтів.",
    7: "Рівняння регресії має вигляд (нат. знач. коеф.):\n" +
       "y = {0} + {1}·x1 + {2}·x2 + {3}·x3",
    8: "Рівняння регресії має вигляд (код. знач. коеф.):\n" +
       "y = {0} + {1}·x1 + {2}·x2 + {3}·x3",
    9: "Рівняння регресії має вигляд (нат. знач. коеф.):\n" +
       "y = {0} + {1}·x1 + {2}·x2 + {3}·x3 + {4}·x1·x2 + {5}·x1·x3 + {6}·x2·x3 + {7}·x1·x2·x3",
    10: "Рівняння регресії має вигляд (код. знач. коеф.):\n" +
        "y = {0} + {1}·x1 + {2}·x2 + {3}·x3 + {4}·x1·x2 + {5}·x1·x3 + {6}·x2·x3 + {7}·x1·x2·x3",
    11: "Рівняння регресії має вигляд (нат. знач. коеф.):\n" +
        "y = {0} + {1}·x1 + {2}·x2 + {3}·x3 + {4}·x1·x2 + {5}·x1·x3 + {6}·x2·x3 + {7}·x1·x2·x3 + " +
        "{8}·x1·x1 + {9}·x2·x2 + {10}·x3·x3",
    12: "Рівняння регресії має вигляд (код. знач. коеф.):\n" +
        "y = {0} + {1}·x1 + {2}·x2 + {3}·x3 + {4}·x1·x2 + {5}·x1·x3 + {6}·x2·x3 + {7}·x1·x2·x3 + " +
        "{8}·x1·x1 + {9}·x2·x2 + {10}·x3·x3",
    13: "Дисперсія однорідна за критерієм Кохрена при m = {0}:\n" +
        "f1 = {1}, f2 = {2}, Gp = {3}",
    14: "Перевіряємо нуль гіпотезу та корегуємо рівняння регресії:\n" +
        "f3 = {0}, t = {1}.",
    15: "Нове рівняння регресії має вигляд (нат. знач. коеф.):\n" +
        "y = {0} + {1}·x1 + {2}·x2 + {3}·x3",
    16: "Нове рівняння регресії має вигляд (код. знач. коеф.):\n" +
        "y = {0} + {1}·x1 + {2}·x2 + {3}·x3",
    17: "Нове рівняння регресії має вигляд (нат. знач. коеф.):\n" +
        "y = {0} + {1}·x1 + {2}·x2 + {3}·x3 + {4}·x1·x2 + {5}·x1·x3 + {6}·x2·x3 + {7}·x1·x2·x3",
    18: "Нове рівняння регресії має вигляд (код. знач. коеф.):\n" +
        "y = {0} + {1}·x1 + {2}·x2 + {3}·x3 + {4}·x1·x2 + {5}·x1·x3 + {6}·x2·x3 + {7}·x1·x2·x3",
    19: "Нове рівняння регресії має вигляд (нат. знач. коеф.):\n" +
        "y = {0} + {1}·x1 + {2}·x2 + {3}·x3 + {4}·x1·x2 + {5}·x1·x3 + {6}·x2·x3 + {7}·x1·x2·x3 " +
        "+ {8}·x1·x1 + {9}·x2·x2 + {10}·x3·x3",
    20: "Нове рівняння регресії має вигляд (код. знач. коеф.):\n" +
        "y = {0} + {1}·x1 + {2}·x2 + {3}·x3 + {4}·x1·x2 + {5}·x1·x3 + {6}·x2·x3 + {7}·x1·x2·x3 " +
        "+ {8}·x1·x1 + {9}·x2·x2 + {10}·x3·x3",
    21: "Перевіряємо адекватність моделі.\n" +
        "f3 = {0}, f4 = {1}, Fp = {2}",
    22: "Модель адекватна оригіналу.",
    23: "Модель не адекватна оригіналу.",
    24: "Змінюємо рівняння регресії.\n",
    25: "Виводимо результати.",
    26: "Оскільки всі моделі не адекватні, то почнемо експерименти з початку.",
    27: "Перевірка критерія Кохрена займає: {0}",
    28: "Перевірка критерія Стьюдента займає: {0}",
    29: "Перевірка критерія Фішера займає: {0}"}


def comment(key, par):
    return print(SYSTEM_MARK_L + text[key].format(*par))


titles = {0: "Матриця планування експерименту (нат. знач. коеф., без взаємодії)",
          1: "Матриця планування експерименту (код. знач. коеф., без взаємодії)",
          2: "Матриця планування експерименту (нат. знач. коеф., із взаємодією)",
          3: "Матриця планування експерименту (код. знач. коеф., із взаємодією)",
          4: "Центральний ортогональний композиційний план (нат. знач. коеф.)",
          5: "Центральний ортогональний композиційний план (код. знач. коеф.)",
          6: "Перевірка знайдених коефіцієнтів (нат. знач. коеф., без взаємодії)",
          7: "Перевірка знайдених коефіцієнтів (код. знач. коеф., без взаємодії)",
          8: "Перевірка знайдених коефіцієнтів (нат. знач. коеф., із взаємодією)",
          9: "Перевірка знайдених коефіцієнтів (код. знач. коеф., із взаємодією)",
          10: "Перевірка знайдених коефіцієнтів (нат. знач. коеф., із квад. членами)",
          11: "Перевірка знайдених коефіцієнтів (код. знач. коеф., із квад. членами)"}

x_headers = {
    0: ["№", "X0", "X1", "X2", "X3"],
    1: ["№", "X0", "X1", "X2", "X3", "X1·X2", "X1·X3", "X2·X3", "X1·X2·X3"],
    2: ["№", "X0", "X1", "X2", "X3", "X1·X2", "X1·X3", "X2·X3", "X1·X2·X3", "X1·X1", "X2·X2", "X3·X3"]
}


def show_plan(title_index, x_header_index, x_lines, experiment):
    print(SYSTEM_MARK_V + titles[title_index])
    plan = BeautifulTable()
    plan.max_table_width = 1000
    y_headers = [f"Y{i + 1}" for i in range(experiment.m)]
    plan.column_headers = [*x_headers[x_header_index], *y_headers]
    for i in range(experiment.N):
        plan.append_row([i + 1, *x_lines[i], *experiment.y[i]])
    print(plan, "\n")


def show_natured_checking_matrix(title_index, x_header_index, x_lines, model, experiment):
    print(SYSTEM_MARK_V + titles[title_index])
    natured_checking_matrix = BeautifulTable()
    natured_checking_matrix.max_table_width = 1000
    natured_checking_matrix.column_headers = [*x_headers[x_header_index], "Average Y[j]", "Exp-tal Y[j]"]
    y_average = experiment.y_average
    for i in range(experiment.N):
        y_exp = model.calculate_with_nature_cfs(x_lines[i])
        natured_checking_matrix.append_row([i+1, *x_lines[i], y_average[i], y_exp])
    print(natured_checking_matrix, "\n")


def show_encoded_checking_matrix(title_index, x_header_index, x_lines, model, experiment):
    print(SYSTEM_MARK_V + titles[title_index])
    encoded_checking_matrix = BeautifulTable()
    encoded_checking_matrix.max_table_width = 1000
    encoded_checking_matrix.column_headers = [*x_headers[x_header_index], "Average Y[j]", "Exp-tal Y[j]"]
    y_average = experiment.y_average
    for i in range(experiment.N):
        y_exp = model.calculate_with_encoded_cfs(x_lines[i])
        encoded_checking_matrix.append_row([i+1, *x_lines[i], y_average[i], y_exp])
    print(encoded_checking_matrix, "\n")
