"""Таблиця для критерія Кохрена"""
base_kohren = [
    [9985, 9750, 9392, 9057, 8772, 8534, 8332, 8159, 8010, 7880, 7341, 6602, 5813, 5000],
    [9669, 8709, 7977, 7457, 7071, 6771, 6530, 6333, 6167, 6025, 5466, 4748, 4031, 3333],
    [9065, 7679, 6841, 6287, 5892, 5598, 5365, 5175, 5017, 4884, 4366, 3720, 3093, 2500],
    [8412, 6838, 5981, 5440, 5063, 4783, 4564, 4387, 4241, 4118, 3645, 3066, 2513, 2000],
    [7808, 6161, 5321, 4803, 4447, 4184, 3980, 3817, 3682, 3568, 3135, 2612, 2119, 1667],
    [7271, 5612, 4800, 4307, 3974, 3726, 3535, 3384, 3259, 3154, 2756, 2278, 1833, 1429],
    [6798, 5157, 4377, 3910, 3595, 3362, 3185, 3043, 2926, 2829, 2462, 2022, 1616, 1250],
    [6385, 4775, 4027, 3584, 3286, 3067, 2901, 2768, 2659, 2568, 2226, 1820, 1446, 1111],
    [6020, 4450, 3733, 3311, 3029, 2823, 2666, 2541, 2439, 2353, 2032, 1655, 1308, 1000],
    [5410, 3924, 3264, 2880, 2624, 2439, 2299, 2187, 2098, 2020, 1737, 1403, 1000, 833],
    [4709, 3346, 2758, 2419, 2159, 2034, 1911, 1815, 1736, 1671, 1429, 1144, 889,  667],
    [3894, 2705, 2205, 1921, 1735, 1602, 1501, 1422, 1357, 1303, 1108, 879,  675,  500],
    [3434, 2354, 1907, 1656, 1493, 1374, 1286, 1216, 1160, 1113, 942,  743,  567,  417],
    [2929, 1980, 1593, 1377, 1237, 1137, 1061, 1002, 958,  921,  771,  604,  457,  333],
    [2370, 1576, 1259, 1082, 968,  887,  827,  780,  745,  713,  595,  462,  347,  250],
    [1737, 1131, 895,  766,  682,  623,  583,  552,  520,  497,  411,  316,  234,  167],
    [998,  632,  495,  419,  371,  337,  312,  292,  279,  266,  218,  165,  120,  83],
]
column_kohren_f1 = {(1,): 0, (2,): 1, (3,): 2, (4,): 3, (5,): 4, (6,): 5, (7,): 6, (8,): 7, (9,): 8,
                    (range(10, 14)): 9, (range(14, 26)): 10, (range(26, 91)): 11, (range(91, 145)): 12}
COLUMN_KOHREN_F1_ELSE = 13

row_kohren_f2 = {(2,): 0, (3,): 1, (4,): 2, (5,): 3, (6,): 4, (7,): 5, (8,): 6, (9,): 7,
                 (range(10, 12)): 8, (range(12, 14)): 9, (range(14, 18)): 10, (range(18, 23)): 11,
                 (range(23, 28)): 12, (range(28, 36)): 13, (range(36, 51)): 14, (range(51, 81)): 15,
                 (range(81, 121)): 16}

ROW_KOHREN_F2_ELSE = 16

"""Таблиця для t-критерія Стьюдента"""
base_student_f3 = {(1,): 12.71, (2,): 4.303, (3,): 3.182, (4,): 2.776, (5,): 2.571, (6,): 2.447, (7,): 2.365, (8,): 2.306,
                   (9,): 2.262, (10,): 2.228, (11,): 2.201, (12,): 2.179, (13,): 2.160, (14,): 2.145, (15,): 2.131,
                   (16,): 2.120, (17,): 2.110, (18,): 2.101, (19,): 2.093, (20,): 2.086, (21,): 2.080, (22,): 2.074,
                   (23,): 2.069, (24,): 2.064, (25,): 2.060, (26,): 2.056, (27,): 2.052, (28,): 2.048, (29,): 2.045,
                   (30,): 2.042}
T_STUDENT_ELSE = 1.960

"""Таблиця для F-критерія Фішера"""
base_phisher = [
    [164.4, 199.5, 215.7, 224.6, 230.2, 234.0, 244.9, 249.0, 254.3],
    [18.5,  19.2,  19.2,  19.3,  19.3,  19.3,  19.4,  19.4,  19.5],
    [10.1,  9.6,   9.3,   9.1,   9.0,   8.9,   8.7,   8.6,   8.5],
    [7.7,   6.9,   6.6,   6.4,   6.3,   6.2,   5.9,   5.8,   5.6],
    [6.6,   5.8,   5.4,   5.2,   5.1,   5.0,   4.7,   4.5,   4.4],
    [6.0,   5.1,   4.8,   4.5,   4.4,   4.3,   4.0,   3.8,   3.7],
    [5.5,   4.7,   4.4,   4.1,   4.0,   3.9,   3.6,   3.4,   3.2],
    [5.3,   4.5,   4.1,   3.8,   3.7,   3.6,   3.3,   3.1,   2.9],
    [5.1,   4.3,   3.9,   3.6,   3.5,   3.4,   3.1,   2.9,   2.7],
    [5.0,   4.1,   3.7,   3.5,   3.3,   3.2,   2.9,   2.7,   2.5],
    [4.8,   4.0,   3.6,   3.4,   3.2,   3.1,   2.8,   2.6,   2.4],
    [4.8,   3.9,   3.5,   3.3,   3.1,   3.0,   2.7,   2.5,   2.3],
    [4.7,   3.8,   3.4,   3.2,   3.0,   2.9,   2.6,   2.4,   2.2],
    [4.6,   3.7,   3.3,   3.1,   3.0,   2.9,   2.5,   2.3,   2.1],
    [4.5,   3.7,   3.3,   3.1,   2.9,   2.8,   2.5,   2.3,   2.1],
    [4.5,   3.6,   3.2,   3.0,   2.9,   2.7,   2.4,   2.2,   2.0],
    [4.5,   3.6,   3.2,   3.0,   2.8,   2.7,   2.4,   2.2,   2.0],
    [4.4,   3.6,   3.2,   2.9,   2.8,   2.7,   2.3,   2.1,   1.9],
    [4.4,   3.5,   3.1,   2.9,   2.7,   2.6,   2.3,   2.1,   1.9],
    [4.4,   3.5,   3.1,   2.9,   2.7,   2.6,   2.3,   2.1,   1.9],
    [4.3,   3.4,   3.1,   2.8,   2.7,   2.6,   2.2,   2.0,   1.8],
    [4.3,   3.4,   3.0,   2.8,   2.6,   2.5,   2.2,   2.0,   1.7],
    [4.2,   3.4,   3.0,   2.7,   2.6,   2.5,   2.2,   2.0,   1.7],
    [4.2,   3.3,   3.0,   2.7,   2.6,   2.4,   2.1,   1.9,   1.7],
    [4.2,   3.3,   2.9,   2.7,   2.5,   2.4,   2.1,   1.9,   1.6],
    [4.1,   3.2,   2.9,   2.6,   2.5,   2.3,   2.0,   1.8,   1.5],
    [4.0,   3.2,   2.8,   2.5,   2.4,   2.3,   1.9,   1.7,   1.4],
    [3.9,   3.1,   2.7,   2.5,   2.3,   2.2,   1.8,   1.6,   1.3],
    [3.8,   3.0,   2.6,   2.4,   2.2,   2.1,   1.8,   1.5,   1.0]
]

row_phisher_f3 = {(1,): 0, (2,): 1, (3,): 2, (4,): 3, (5,): 4, (6,): 5, (7,): 6, (8,): 7, (9,): 8, (10,): 9,
                  (11,): 10, (12,): 11, (13,): 12, (14,): 13, (15,): 14, (16,): 15, (17,): 16, (18,): 17, (19,): 18,
                  (20, 21): 19, (22, 23): 20, (24, 25): 21, (26, 27): 22, (28, 29): 23, (range(30, 36)): 24,
                  (range(36, 51)): 25, (range(51, 91)): 26, (range(91, 121)): 27}
ROW_PHISHER_F3_ELSE = 28

column_phisher_f4 = {(1,): 0, (2,): 1, (3,): 2, (4,): 3, (5,): 4, (range(6, 10)): 5, (range(10, 19)): 6,
                     (range(19, 25)): 7}
COLUMN_PHISHER_F4_ELSE = 8


def check_kohren(f1, f2, Gp):
    """True, якщо дисперсія однорідна"""
    row = -1
    column = -1
    for key in row_kohren_f2.keys():
        if f2 in key:
            row = row_kohren_f2[key]
            break
    if row == -1:
        row = ROW_KOHREN_F2_ELSE

    for key in column_kohren_f1.keys():
        if f1 in key:
            column = column_kohren_f1[key]
            break
    if column == -1:
        column = COLUMN_KOHREN_F1_ELSE
    return Gp < (base_kohren[row][column]/1000)


def check_student(f3, t_exp):
    """True, якщо коефіцієнт Bs є значущим."""
    t_teo = -1
    for key in base_student_f3.keys():
        if f3 in key:
            t_teo = base_student_f3[key]
            break

    if t_teo == -1:
        t_teo = T_STUDENT_ELSE

    return t_exp > t_teo


def check_phisher(f3, f4, Fp):
    """True, якщо отримана математична модель адекватна експериментальним даним."""
    row = -1
    column = -1
    for key in row_phisher_f3.keys():
        if f3 in key:
            row = row_phisher_f3[key]
            break
    if row == -1:
        row = ROW_PHISHER_F3_ELSE

    for key in column_phisher_f4.keys():
        if f4 in key:
            column = column_phisher_f4[key]
            break
    if column == -1:
        column = COLUMN_PHISHER_F4_ELSE
    return Fp <= base_phisher[row][column]
